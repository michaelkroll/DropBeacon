# DropBeacon v1.0 firmware
# using BLE112 SDK v1.2.2 build100
# (c) by Dr. Michael Kroll 2014
#
# http://www.mkroll.mobi
# http://forum.mkroll.mobi

dim custom_adv_data(30)
dim custom_sr_data(26)
dim bdaddr(6)

dim connected
dim encrypted

dim len_writeable_status
dim writeable_status(1)
dim new_writeable_status(1)

dim result

dim len

dim prox_data(16)
dim major_data(2)
dim minor_data(2)

dim battery_data(1)

# OTA related variables
#######################
dim command
dim spi_response(4)
dim tmp(4)
dim spiresult
dim channel
dim spi_len
dim curr_connection
#current pointer to flash location to upload firmware
dim dfu_pointer  
dim a
# Flash retry counter
dim retry_counter
# Flash retry counter
dim max_retries
########################

# container for battery measurement percentage
dim bat_pct     
dim bat_pct_buffer(1)

dim battery_timer_interval
dim battery_update_counter
dim battery_update_counter_reached

event system_boot(major, minor, patch, build, ll_version, protocol, hw)	
	
	# set the batter timer interval to: 
	# 1 second interval (32768 = crystal frequency) 32768 is dec, $8000 is hex
	# 2.5 second interval (81920 dec) $14000 hex
	# 5 second interval (163840 dec) $28000 hex
	# 10 second interval (327680 dec) $50000 hex
	battery_timer_interval = $50000
	
	# Set the battery update counter to 0
	battery_update_counter = 0
	
	# Set the batteryCounter reached count to a fixed value
	# (60/10 = 6 Cycles per Minute)
	# 6 * 60 = 360 decimal, $168/hex (1hr). 
	#battery_update_counter_reached = $168 # Should be 1 hours
    battery_update_counter_reached = $CA8 # Should be 6 hours
	#battery_update_counter_reached = $1950 # Should be 12 hours
		
	#read the local devices public Bluetooth address
	call system_address_get()(bdaddr(0:6))
	
	# Load the status from the writable flag from storage
	call flash_ps_load($8000)(result, len_writeable_status, writeable_status(0:1))
	
	# enable interrupt on P1_1 rising edge
    # (parameters are port=1, bitmask=0b00000010, edge=rising)
    call hardware_io_port_config_irq(1, 2, 0)	
	
	# set all GPIO pins to input/high (pull), except P1_0 and P1_1 to output HIGH (no internal pull-ups)
    # P1_0/1 will leak current if not externally pulled or set as outputs
	call hardware_io_port_config_direction(0, $f)
    call hardware_io_port_write(0, $ff, $ff)
    call hardware_io_port_config_direction(2, $0)
    call hardware_io_port_write(2, $ff, $ff)
	
	# Flags
	custom_adv_data( 0:1) = $02
	custom_adv_data( 1:1) = $01
	custom_adv_data( 2:1) = $06
	
	# Manufacturer data
	custom_adv_data( 3:1) = $1a
	custom_adv_data( 4:1) = $ff
	
	# Preamble - Apple Company Identifier - data type, 0x02 - data length, 0x15 = 21
	custom_adv_data( 5:1) = $4c
	custom_adv_data( 6:1) = $00
	custom_adv_data( 7:1) = $02
	custom_adv_data( 8:1) = $15
	
	# Custom UUID
	# E2 C5 6D B5-DF FB-48 D2-B0 60-D0 F5 A7 10 96 E0 
	# One of the UUIDs used in the AirLocate Sample of Apple.
	#
	# The UUID (16 bytes long)
	#load major to advertisment data
	call flash_ps_load($8014)(result, len, prox_data(0:len))
	if result = 0 
		custom_adv_data( 9:1) = prox_data(0:1) # 0
		custom_adv_data(10:1) = prox_data(1:1) # 1
		custom_adv_data(11:1) = prox_data(2:1) # 2
		custom_adv_data(12:1) = prox_data(3:1) # 3
		custom_adv_data(13:1) = prox_data(4:1) # 4
		custom_adv_data(14:1) = prox_data(5:1) # 5
		custom_adv_data(15:1) = prox_data(6:1) # 6
		custom_adv_data(16:1) = prox_data(7:1) # 7
		custom_adv_data(17:1) = prox_data(8:1) # 8
		custom_adv_data(18:1) = prox_data(9:1) # 9
		custom_adv_data(19:1) = prox_data(10:1) # 10
		custom_adv_data(20:1) = prox_data(11:1) # 11
		custom_adv_data(21:1) = prox_data(12:1) # 12
		custom_adv_data(22:1) = prox_data(13:1) # 13
		custom_adv_data(23:1) = prox_data(14:1) # 14
		custom_adv_data(24:1) = prox_data(15:1) # 15
	else
		custom_adv_data( 9:1) = $E2 # 0
		custom_adv_data(10:1) = $C5 # 1
		custom_adv_data(11:1) = $6D # 2
		custom_adv_data(12:1) = $B5 # 3
		custom_adv_data(13:1) = $DF # 4
		custom_adv_data(14:1) = $FB # 5
		custom_adv_data(15:1) = $48 # 6
		custom_adv_data(16:1) = $D2 # 7
		custom_adv_data(17:1) = $B0 # 8
		custom_adv_data(18:1) = $60 # 9
		custom_adv_data(19:1) = $D0 # 10
		custom_adv_data(20:1) = $F5 # 11
		custom_adv_data(21:1) = $A7 # 12
		custom_adv_data(22:1) = $10 # 13
		custom_adv_data(23:1) = $96 # 14
		custom_adv_data(24:1) = $E0 # 15
		
		prox_data( 0:1) = $E2 # 0
		prox_data( 1:1) = $C5 # 1
		prox_data( 2:1) = $6D # 2
		prox_data( 3:1) = $B5 # 3
		prox_data( 4:1) = $DF # 4
		prox_data( 5:1) = $FB # 5
		prox_data( 6:1) = $48 # 6
		prox_data( 7:1) = $D2 # 7
		prox_data( 8:1) = $B0 # 8
		prox_data( 9:1) = $60 # 9
		prox_data(10:1) = $D0 # 10
		prox_data(11:1) = $F5 # 11
		prox_data(12:1) = $A7 # 12
		prox_data(13:1) = $10 # 13
		prox_data(14:1) = $96 # 14
		prox_data(15:1) = $E0 # 15
		call flash_ps_save($8014, 16, prox_data(0:16))  # psstore the uuid
	end if
	call attributes_write(prox_id, 0, 16, prox_data(0:16))
	# ---

	# Major (2 bytes long)
	#load major to advertisment data
	call flash_ps_load($8015)(result, len, major_data(0:len))
	if result = 0
		custom_adv_data(25:1) = major_data(0:1)
		custom_adv_data(26:1) = major_data(1:1)
	else
		custom_adv_data(25:1) = $00
		custom_adv_data(26:1) = $01
		
		major_data(0:1) = $00
		major_data(1:1) = $01
		call flash_ps_save($8015, 2, major_data(0:2))  # psstore the major_id		
	end if
	call attributes_write(major_id, 0, 2, major_data(0:2))
	
	# Minor (2 bytes long)
	# load minor to advertisment data
	call flash_ps_load($8016)(result, len, minor_data(0:len))
	if result = 0
		custom_adv_data(27:1) = minor_data(0:1)
		custom_adv_data(28:1) = minor_data(1:1)
	else
		custom_adv_data(27:1) = $00
		custom_adv_data(28:1) = $01
		
		minor_data(0:1) = $00
		minor_data(1:1) = $01		
		call flash_ps_save($8016, 2, minor_data(0:2))  # psstore the minor_id		
		
	end if	
	call attributes_write(minor_id, 0, 2, minor_data(0:2))

	# Measured power at 1 meter (specified in 2's complement, so 0xC6 is -58)
	custom_adv_data(29:1) = $c6
		
	# Local Name 
	custom_sr_data( 0:1) = $14 # Length of this Data
	custom_sr_data( 1:1) = $09 # AD Type = Complete Local Name
	custom_sr_data( 2:1) = $44 # D
	custom_sr_data( 3:1) = $72 # r
	custom_sr_data( 4:1) = $6F # o	
	custom_sr_data( 5:1) = $70 # p
	custom_sr_data( 6:1) = $42 # B
	custom_sr_data( 7:1) = $65 # e
	custom_sr_data( 8:1) = $61 # a
	custom_sr_data( 9:1) = $63 # c
	custom_sr_data(10:1) = $6F # o
	custom_sr_data(11:1) = $6E # n	
	custom_sr_data(12:1) = $20 # 	
	custom_sr_data(13:1) = (bdaddr(3:1)/$10) + 48 + ((bdaddr(3:1)/$10)/10*7) 
	custom_sr_data(14:1) = (bdaddr(3:1)&$f)  + 48 + ((bdaddr(3:1)&$f )/10*7) 
	custom_sr_data(15:1) = (bdaddr(2:1)/$10) + 48 + ((bdaddr(2:1)/$10)/10*7) 
	custom_sr_data(16:1) = (bdaddr(2:1)&$f)  + 48 + ((bdaddr(2:1)&$f )/10*7) 
	custom_sr_data(17:1) = (bdaddr(1:1)/$10) + 48 + ((bdaddr(1:1)/$10)/10*7) 
	custom_sr_data(18:1) = (bdaddr(1:1)&$f)  + 48 + ((bdaddr(1:1)&$f )/10*7) 
	custom_sr_data(19:1) = (bdaddr(0:1)/$10) + 48 + ((bdaddr(0:1)/$10)/10*7) 
	custom_sr_data(20:1) = (bdaddr(0:1)&$f)  + 48 + ((bdaddr(0:1)&$f )/10*7)

	# read the stored battery reading
	call flash_ps_load($8017)(result, len, battery_data(0:len))
	if result = 0
	    custom_sr_data(21:1) = $04 # Length of this Data
		custom_sr_data(22:1) = $16 # AD Type = Service Data
        custom_sr_data(23:1) = $0f # Service UUID
        custom_sr_data(24:1) = $18 # Service UUID
		custom_sr_data(25:1) = battery_data(0:1)
	else
	    custom_sr_data(21:1) = $04 # Length of this Data
		custom_sr_data(22:1) = $16 # AD Type = Service Data
        custom_sr_data(23:1) = $0f # Service UUID
        custom_sr_data(24:1) = $18 # Service UUID
		custom_sr_data(25:1) = $ff # Fake reading		
	end if		
	
	# write custom device name to local GATT attribute
    call attributes_write(xgatt_device_name, 0, 19, custom_sr_data(2:19))
	
	# Minimum advertisement interval in units of 625us
	# Range:
	# 0x20 to 0x4000
	# (Default 0x200 = 320ms)
	# Explanation:
	# 0x200 = 512
	# 512 * 625us = 320000us = 320ms	
	# adv chennels 0x04 only 37 chaneel , 0x03 37 and 38 channel , 0x07 Three channel
	# set advertisement interval to 125ms second, all three channels
	call gap_set_adv_parameters(200, 200, 7) # 320ms, 320ms, all three channels.
	# After testing this ADV rates, the battery holds only for about 6 weeks.
	
	
	# Set advertisement data
	call gap_set_adv_data(0, 30, custom_adv_data(0:30))
	
	# Set Scan Record data
	call gap_set_adv_data(1, 26, custom_sr_data(0:26))
	
	#set to advertising mode
	if writeable_status(0:1)=$ff
		call gap_set_mode(gap_user_data, gap_undirected_connectable)
		call hardware_io_port_write(0,$1,$1)				
	end if
	
	if writeable_status(0:1)=$00
		call gap_set_mode(gap_user_data, gap_undirected_connectable)
		call hardware_io_port_write(0,$1,$0)				
	end if	
	
	# Initialize the DFU pointer
	dfu_pointer=0
	
	# Inti Flash retry counter and MAX retries
	retry_counter=0
	max_retries=10
	
	# set power pin as output and pull down
	# also set p1.1 to output (does not have internal pull-resistor)
	call hardware_io_port_config_pull(1,$7,1)
    call hardware_io_port_write(1,$7,0)    
	call hardware_io_port_config_direction(1,$3)
	
	call hardware_set_soft_timer($ff, 2, 1)
	call hardware_set_soft_timer(battery_timer_interval, 1, 0) 
end

# Timer expired event handler 
# Poll flash and if itâ€™s ready, and send response to the remote device (DFU application)
event hardware_soft_timer(handle)
	
	if handle=0 then
	    call hardware_io_port_config_direction(1,$7)
        call hardware_spi_transfer(0,2,"\x05\x00")(spiresult,channel,spi_len,spi_response(0:3))
		call hardware_io_port_config_direction(1,$3)
		
		# Check if max retries have been reached
		if (retry_counter < max_retries) then
			# Increase retry counter
			retry_counter = retry_counter + 1
		else
			# Could not talk to the flash : Report error core 0x90
			call attributes_user_write_response(curr_connection, $90)
		end if
		# Flash was not ready â€“ check again later
        if spi_response(1:1) & 1 then
		    call hardware_set_soft_timer(6000,0,1)		
		else
			# Flash was ready, send response to the remote device (DFU application)
			call attributes_user_write_response(curr_connection, 0)
		end if
		
	end if
	
	if handle=1 then
		# Here the batterycounter is incremented and checked if the battery needs to be 
		battery_update_counter = battery_update_counter + 1
		if battery_update_counter >= battery_update_counter_reached
			# Read the battery level now
			call hardware_adc_read(15, 3, 0)
		end if
	end if
	
	if handle=2 then
		# Read the battery level now
		call hardware_adc_read(15, 3, 0)	
	end if
end

event attributes_user_read_request(connection, handle, offset, maxsize) 

    # check for battery characteristic read request
    if handle = c_battery_measurement then
        # queue ADC reading (VDD/3 source, 12 effective bits, internal 1.24v reference)
        call hardware_adc_read(15, 3, 0)
        
        # for details on the ADC operation, reference voltages, etc., please see
        # Chapter 12 (ADC) of the CC2540 User Guide:
        #     http://www.ti.com/lit/swru191
        
        # NOTE: if the DC/DC converter is in use and the <pmux> tag in hardware.xml
        # has enabled regulator control, then the BLE stack will **AUTOMATICALLY**
        # put the converter into bypass mode during an ADC read on channel 15. This
        # ensures that the actual battery voltage is read, and not a regulated ~2v
        # level. You **DO NOT** need to handle this manually.
    end if

	if handle=prox_id
		# load the stored UUID from psstore
		call flash_ps_load($8014)(result, len, prox_data(0:len))
		# respond with the stored uuid (connection=curr_connection, result=0, length=16, data=prox_data(0:16))
        call attributes_user_read_response(curr_connection, 0, 16, prox_data(0:16))
	end if
  
	if handle=major_id
		# load the stored id from psstore
		call flash_ps_load($8015)(result, len, major_data(0:len))
		# respond with the stored uuid (connection=curr_connection, result=0, length=2, data=major_data(0:2))
		call attributes_user_read_response(curr_connection, 0, 2, major_data(0:2))
	end if
	
	if handle=minor_id
		# load the stored id from psstore
		call flash_ps_load($8016)(result, len, minor_data(0:len))
		# respond with the stored uuid (connection=curr_connection, result=0, length=2, data=minor_data(0:2))
		call attributes_user_read_response(curr_connection, 0, 2, minor_data(0:2))
	end if
	
end

event attributes_value(connection, reason, handle, offset, value_len, value_data)
	
	# check if the beacon is in writable mode
	if writeable_status(0:1)=$ff
		#save connection handle, is always 0 if only slave
		curr_connection=connection
	
		# Check if OTA control point attribute is written by the remote device and execute the command
		# Command 0 : Erase flash block 0 (0x0-0x1FFFF)
		# Command 1 : Erase flash block 1 (0x10000-0x3FFFF)
		# Command 2 : Reset DFU data pointer
		# Command 3 : Boot to DFU mode
		# In case of errors application error code 0x80 is returned to the remote device
		# In case the flash comms fails error code 0x90 is returned to the remote device
		if handle = ota_control then
			#attribute is user attribute, reason is always write_request_user
			if value_len >1 || offset >0 then
				# Not a valid command -> report application error code : 0x80
				call attributes_user_write_response(connection, $80)
			else
				command=value_data(0:1)
				if command=0 then	# Command 0 received -> Erase block 0
					#reset retry counter
					retry_counter=0
					#write enable, cs down
					call hardware_io_port_config_direction(1,$7)        
					call hardware_spi_transfer(0,1,"\x06")
					call hardware_io_port_config_direction(1,$3)
					# erase block 0 : 0-1ffff
					call hardware_io_port_config_direction(1,$7)
					call hardware_spi_transfer(0,4,"\xd8\x00\x00\x00")
					call hardware_io_port_config_direction(1,$3)        
					#start timer to poll for erase complete
					call hardware_set_soft_timer(6000,0,1)
				end if
			
				if command=1 then # Command 1 received -> Erase block 1	
					#reset retry counter
					retry_counter=0
					#write enable
					call hardware_io_port_config_direction(1,$7)
					call hardware_spi_transfer(0,1,"\x06")
					call hardware_io_port_config_direction(1,$3)
					# erase block 1 : 10000-3ffff
					call hardware_io_port_config_direction(1,$7)
					call hardware_spi_transfer(0,4,"\xd8\x01\x00\x00")
					call hardware_io_port_config_direction(1,$3)
					#start timer to poll for erase complete
					call hardware_set_soft_timer(6000,0,1)
				end if
				if command=2 then # Command 2 received -> Erase DFU pointer
					dfu_pointer=0
					call attributes_user_write_response(curr_connection, 0)
				end if
				if command=3 then # Command 3 received -> Boot to DFU mode 
					call system_reset(1)
				end if
				if command=4 then  # Command 4 received -> power up the SPI flash
					#pull power and chip select pins up
					call hardware_io_port_write(1,$1,$1)
					call attributes_user_write_response(curr_connection, $0)
				end if
				if command>4 then # Unknown command -> report application error code : 0x80
					call attributes_user_write_response(curr_connection, $80)
				end if				
			end if
		end if
	
		# Check if OTA data attribute is written which carries the firmware update
		# and store the data to the external SPI flash
		if handle = ota_data then
			# NOTE: when programming page, address cannot wrap over 256 byte boundary.
			# This must be handled in the remote DFU application	
			# This is write no response attribute, no need to handle response to other end
			# TODO: handle zero length writes
			spi_response(0:1)=2	#page program command
			#flip endianness for address
			tmp(0:4)=dfu_pointer
			spi_response(1:1)=tmp(2:1)
			spi_response(2:1)=tmp(1:1)
			spi_response(3:1)=tmp(0:1)
			# enable SPI flash write mode
			#write enable
			call hardware_io_port_config_direction(1,$7)
			call hardware_spi_transfer(0,1,"\x06")
			call hardware_io_port_config_direction(1,$3)
			
			#write data
			call hardware_io_port_config_direction(1,$7)
			call hardware_spi_transfer(0,4,spi_response(0:4))
			
			#send data in next transfer, leave chip select asserted
			call hardware_spi_transfer(0,value_len,value_data(0:value_len))
			call hardware_io_port_config_direction(1,$3)
		
			#it can take up to 800 us for full page to program
			#loop couple of times for write to complete
			call hardware_io_port_config_direction(1,$7)
			call hardware_spi_transfer(0,2,"\x05\x00")(spiresult,channel,spi_len,spi_response(0:2))#start polling
			a=spi_response(1:1)
			while a&1
				call hardware_spi_transfer(0,1,"\x00")(spiresult,channel,spi_len,spi_response(0:1))
				a=spi_response(0:1)
			end while
			call hardware_io_port_config_direction(1,$3)
		
			#increase DFU offset
			dfu_pointer=dfu_pointer+value_len
		end if	
	
		# Beacon related characteristics 
		if handle = prox_id then
			call flash_ps_save($8014, value_len, value_data(0:value_len))  # psstore the uuid
			call attributes_write(prox_id, 0, 16, value_data(0:16))
			# respond with ok (connection=curr_connection, result=0)
			call attributes_user_write_response(curr_connection, 0)
		end if
		if handle = major_id then
			call flash_ps_save($8015, 2, value_data(0:2))  # psstore the major
			call attributes_write(major_id, 0, 2, value_data(0:2))
			call flash_ps_load($8015)(result, len, major_data(0:len))
			# respond with ok (connection=curr_connection, result=0)
			call attributes_user_write_response(curr_connection, 0)
		end if
		if handle = minor_id then
			call flash_ps_save($8016, value_len, value_data(0:value_len))  # psstore the minor
			call attributes_write(minor_id, 0, 2, value_data(0:2))
			call flash_ps_load($8016)(result, len, minor_data(0))
			# respond with ok (connection=curr_connection, result=0)
			call attributes_user_write_response(curr_connection, 0)	
		end if
	end if
	
	# check if the beacon is not in writable mode
	if writeable_status(0:1)=$00
		call system_reset(0)	    
	end if
end

# catch new or updated connection
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    # check for "new connection established" event
    if (flags & $05) = $05 then
        # update status vars
        connected = 1
    end if
    
    # check for "encrypted" status (e.g. connected + paired)
    if (flags & $02) = $02 then
        # update status vars
        encrypted = 1
    end if
end

# catch disconnection
event connection_disconnected(connection, reason)
    
	# update status vars
    connected = 0
    encrypted = 0
	
	# read the stored battery reading
	call flash_ps_load($8017)(result, len, battery_data(0:len))
	# add the new battery reading to the sr data
	custom_sr_data(25:1) = battery_data(0:1)
	# Set Scan Record data
	call gap_set_adv_data(1, 26, custom_sr_data(0:26))
    # if disconnected, return to advertisement mode
    call gap_set_mode(gap_user_data, gap_undirected_connectable)
end

# catch button press for P1_1 (active HIGH configuration, hardware.xml pulls it low)
event hardware_io_port_status(delta, port, irq, state)    
	if port = 1 then
        if (irq & 2) = 2 then
			# P1_1 is HIGH and the source of this interrupt
			if writeable_status(0:1) = $00
				new_writeable_status(0:1) = $ff
			end if 
			if writeable_status(0:1) = $ff
				new_writeable_status(0:1) = $00
			end if
			call flash_ps_save($8000, 1, new_writeable_status(0:1))
			call system_reset(0) # 0 indicated to just reset without rebooting in DFU mode.				
        end if
    end if
end

event hardware_adc_result(input, value)
    # check for internal AVDD/3 result (battery channel)
    if input = 15 then
        # ADC behavior:
        # - Range is [-2048, +2047] when 12 ENOB is selected
        # - Value will be left-aligned in a 16-bit container, meaning the direct
        #       result will be in the range [-32768, +32767] and must be shifted
        # - Actual battery readings will only ever be positive, so we only care
        #       about the positive part of the range [0, +32767] or 0x0000-0x7FFF
        # - VDD voltage = (value >> 4) * 3 * 1.24 / 2048
        
        # Since no "float" data type exists in BGScript, we must convert the 
        # measurement manually, losing only as much precision as we have to in
        # the process.
        
        # *** IMPORTANT***
        # A new CR2450 battery reads at ~3.24v based on some tests, but different
        # batteries may exhibit different levels here depending on chemistry.
        # You should test the range with your own battery to make sure).
        
        # To scale the read value [0, +32767] to the range [0, 100] properly
        # we have to determine the 0% reading and the 100% reading based on
        # operating voltages.
        #
        # - A "full" battery will read ~3.24v:
        #   --> (3.24v/3) * (32767/1.24v) = 28539
        # - An "empty" battery will read ~2.0v (min module voltage):
        #   --> (2.0v/3) * (32767/1.24v) = 17616
        
        # This means we must scale [+17616, +23342] to [0, +100]
        
        bat_pct = (value - 17616) * 100 / (28539 - 17616)
        
        # NOTE: you can keep the battery at 100% for longer if you DECREASE
        # the high value (28539 above), and you can make it drop to 0% faster
        # if you INCREASE the low value (17616 above). You may need to test
        # to find a good range based on your own battery supply selection.
        
        # enforce 0%/100% bounds
        if bat_pct > 100 then
            bat_pct = 100
        end if
        if bat_pct < 0 then
            bat_pct = 0
        end if

		bat_pct_buffer(0:1) = bat_pct
		
		# store the reading in pstore
		call flash_ps_save($8017, 1, bat_pct_buffer(0:1))  # psstore the minor_id

		# read the stored battery reading
		call flash_ps_load($8017)(result, len, battery_data(0:len))
		# add the new battery reading to the sr data
		custom_sr_data(25:1) = battery_data(0:1)
		# Set Scan Record data
		call gap_set_adv_data(1, 26, custom_sr_data(0:26))
		
		call gap_set_mode(gap_user_data, gap_undirected_connectable)
		
		if connected=1
			# respond with calculated percent (connection=0, result=0, length=1, data=bat_pct)
			call attributes_user_read_response(0, 0, 1, bat_pct)	
		end if		
    end if
end